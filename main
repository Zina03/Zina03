#include "sapper.h"


int main()
{
	/*char* name = new char[256]{ 0 };
	strcpy(name, "my au");
	if (search_person(name))
	{

		user* p1 = create_user("myau", 18);
		write_person(*p1);
		delete_user(p1);
	}*/
	// Чтение (без записанных данных не работает)

	/*bool success;
	size_t len;
	user** res = read_persons(&success, len);

	if (success)
	{
		for (size_t i = 0; i < len; ++i)
		{
			print_user(*res[i]);
		}
	}
	else
	{
		std::cout << "failed to read\n";
	}*/

	setlocale(LC_ALL, "Russian");
	srand(time(nullptr));

	bool flag;   // Повторение цикла при ошибках
	short Game; // Повторение игрового цикла

	size_t size = 20; // Размер поля
	short mines = 10;  // Количество мин на игровом поле.

	short language = 1;  // Выбор языка
	short op; // Опции

	std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;
	std::cout << std::setw(210) << std::setfill('#') << '#' << std::endl;
	std::cout << std::setw(210) << std::setfill('#') << '#' << std::endl << std::endl;

	EpilepsyTime("Minesweeper game is Loading.");

	do
	{
		flag = true;
		Game = true;
		
		// Создаем игровое поле по параметрам, выбранным пользователями

		{
			// Выбору языка
			{

				std::cout << std::endl << std::setw(210) << std::setfill('#') << '#' << std::endl;
				std::cout << std::setw(210) << std::setfill('#') << '#' << std::endl;
				std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

				std::cout << std::setw(100) << std::setfill(' ') << " Select Language:" << std::endl;
				std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

				std::cout << std::setw(85) << std::setfill(' ') << ' ' << " 0. Russian" << std::endl; // Russian
				std::cout << std::setw(85) << std::setfill(' ') << ' ' << " 1. English" << std::endl; // English

				std::cout << std::setw(94) << std::setfill(' ') << " => ";std::cin >> language;
				if (language != 0 && language != 1)
				{
					std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;
					std::cout << std::setw(100) << std::setfill(' ') << " Default Russian" << std::endl;

					language = 0;
				}
			}

			std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

			// Выбор размера поля
			{
				do
				{

					if (!language)
					{
						std::cout << std::setw(108) << std::setfill(' ') << " Выберите размер игрового поля:" << std::endl;
					}
					else
					{
						std::cout << std::setw(110) << std::setfill(' ') << " Select the size of the playing field:" << std::endl;
					}

					std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;
					std::cout << std::setw(85) << std::setfill(' ') << ' ' << " 1. 10 x 10" << std::endl; // Ten
					std::cout << std::setw(85) << std::setfill(' ') << ' ' << " 2. 15 x 15" << std::endl; // Fifteen
					std::cout << std::setw(85) << std::setfill(' ') << ' ' << " 3. 20 x 20" << std::endl; // Fifteen
					std::cout << std::setw(92) << std::setfill(' ') << " => "; std::cin >> op;
					std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

					switch (op)
					{
						case Ten:
							{
								size = 10;

								// Выбор Игрового режима
								{
									do
									{
										if (!language)
										{
											std::cout << std::setw(103) << std::setfill(' ') << " Выберите игровой режим:" << std::endl;
											std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 1. Легкий  (10 мин )" << std::endl; // Easy
											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 2. Средний (20 мин )" << std::endl; // Medium
											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 3. Сложный (30 мин )" << std::endl; // Hard
										}
										else
										{
											std::cout << std::setw(99) << std::setfill(' ') << " Select a Game Mode:" << std::endl;
											std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 1. Easy   (10 mines)" << std::endl; // Easy
											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 2. Medium (20 mines)" << std::endl; // Medium
											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 3. Hard   (30 mines)" << std::endl; // Hard
										}

										std::cout << std::setw(92) << std::setfill(' ') << " => "; std::cin >> op;
										std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

										switch (op)
										{
											case Easy:
												{
													mines = 10;
													flag = false;
													break;
												}
											case Medium:
												{
													mines = 20;
													flag = false;
													break;
												}
											case Hard:
												{
													mines = 30;
													flag = false;
													break;
												}
											default:
												std::cout << std::setw(115) << std::setfill(' ');

												if (!language) std::cout << "Вы ввели что-то не так, попробуйте еще раз!" << std::endl;
												else std::cout << "You entered something wrong, please try again!" << std::endl;
												Wrong();
												std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;
										}
									} while (flag);
									break;
								}
							}
						case Fifteen:
							{
								size = 15;
								// Выбор Игрового режима
								{
									do
									{
										if (!language)
										{
											std::cout << std::setw(103) << std::setfill(' ') << " Выберите игровой режим:" << std::endl;
											std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 1. Легкий  (20 мин )" << std::endl; // Easy
											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 2. Средний (45 мин )" << std::endl; // Medium
											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 3. Сложный (70 мин )" << std::endl; // Hard
										}
										else
										{
											std::cout << std::setw(99) << std::setfill(' ') << " Select a Game Mode:" << std::endl;
											std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 1. Easy   (20 mines)" << std::endl; // Easy
											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 2. Medium (45 mines)" << std::endl; // Medium
											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 3. Hard   (70 mines)" << std::endl; // Hard
										}
										std::cout << std::setw(92) << std::setfill(' ') << " => "; std::cin >> op;
										std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

										switch (op)
										{
											case Easy:
												{
													mines = 20;
													flag = false;
													break;
												}
											case Medium:
												{
													mines = 45;
													flag = false;
													break;
												}
											case Hard:
												{
													mines = 70;
													flag = false;
													break;
												}
											default:
												std::cout << std::setw(115) << std::setfill(' ');

												if (!language) std::cout << "Вы ввели что-то не так, попробуйте еще раз!" << std::endl;
												else std::cout << "You entered something wrong, please try again!" << std::endl;
												Wrong();
												std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;
										}
									} while (flag);
									break;
								}
							}
						case Twenty:
							{
								size = 20;
								// Выбор Игрового режима
								{
									do
									{
										if (!language)
										{
											std::cout << std::setw(103) << std::setfill(' ') << " Выберите игровой режим:" << std::endl;
											std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 1. Легкий  (50 мин )" << std::endl; // Easy
											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 2. Средний (100 мин )" << std::endl; // Medium
											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 3. Сложный (200 мин )" << std::endl; // Hard
										}
										else
										{
											std::cout << std::setw(99) << std::setfill(' ') << " Select a Game Mode:" << std::endl;
											std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 1. Easy   (50 mines)" << std::endl; // Easy
											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 2. Medium (100 mines)" << std::endl; // Medium
											std::cout << std::setw(80) << std::setfill(' ') << ' ' << " 3. Hard   (200 mines)" << std::endl; // Hard
										}
										std::cout << std::setw(92) << std::setfill(' ') << " => "; std::cin >> op;
										std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

										switch (op)
										{
											case Easy:
												{
													mines = 50;
													flag = false;
													break;
												}
											case Medium:
												{
													mines = 100;
													flag = false;
													break;
												}
											case Hard:
												{
													mines = 200;
													flag = false;
													break;
												}
											default:
												std::cout << std::setw(115) << std::setfill(' ');

												if (!language) std::cout << "Вы ввели что-то не так, попробуйте еще раз!" << std::endl;
												else std::cout << "You entered something wrong, please try again!" << std::endl;
												Wrong();
												std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;
										}
									} while (flag);
									break;
								}
							}

						default:
							std::cout << std::setw(115) << std::setfill(' ');

							if (!language) std::cout << "Вы ввели что-то не так, попробуйте еще раз!" << std::endl;
							else std::cout << "You entered something wrong, please try again!" << std::endl;
							Wrong();
							std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;
					}
				} while (flag);
			}
		}

		// Заголовок игры по выбору языка

		system("cls");


		switch (language)
		{
			case Russian:
				{
					std::cout << std::setw(210) << std::setfill('#') << '#' << std::endl;
					std::cout << std::setw(210) << std::setfill('#') << '#' << std::endl << std::endl;
					std::cout << std::setw(78) << std::setfill(' ') << ' ' << (char)176;
					printf("\x1B[31mДобро пожаловать в игру \"Сапер\"\033[0m");
					std::cout << (char)176 << std::endl;
					std::cout << std::setw(55) << std::setfill(' ') << ' ' << " Ваша цель вскрыть пустые ячейки, не вскрыв при этом ни одной, содержащей мину." << std::endl << std::endl;

					std::cout << std::setw(84) << std::setfill(' ') << ' ';
					printf("\x1B[31mПравила игры :\033[0m");
					std::cout << std::endl << std::endl;
					std::cout << std::setw(55) << std::setfill(' ') << ' ' << " Выбрать определенную координату на поле. При выборе ячейки, она открывается. " << std::endl;
					std::cout << std::setw(68) << std::setfill(' ') << ' ' << " Если в ней находится мина, то игрок проигрывает. " << std::endl << std::endl;
					std::cout << std::setw(27) << std::setfill(' ') << ' ' << " Если в самой ячейке мины нет, но есть мины в соседних ячейках, то отображается число, соответствующее количеству мин в соседних ячейках." << std::endl;
					std::cout << std::setw(40) << std::setfill(' ') << ' ' << " Несколько соседних ячеек с числами указывают на одни и те же мины, что позволяет точно определить опасные клетки. " << std::endl;
					std::cout << std::setw(45) << std::setfill(' ') << ' ' << " Если ни в самой ячейке, ни в соседних с ней ячейках нет мин, то открываются все соседние пустые ячейки. " << std::endl << std::endl;

					std::cout << std::setw(64) << std::setfill(' ') << ' ' << " Для удобства, ячейки с минами можно помечать флажками." << std::endl;
					std::cout << std::setw(58) << std::setfill(' ') << ' ' << " Игра выигрывается, как только открыты все ячейки, не содержащие мин." << std::endl << std::endl;
					std::cout << std::setw(84) << std::setfill(' ') << ' ';
					printf("\x1B[34mУдачной вам игры!\033[0m");
					std::cout << std::endl << std::endl;
					std::cout << std::setw(210) << std::setfill('#') << '#' << std::endl;
					std::cout << std::setw(210) << std::setfill('#') << '#' << std::endl;
					std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

					Sleep(3000);
					EpilepsyTime("Запуск игры.");
					break;
				}

			case English:
				{
					std::cout << std::setw(210) << std::setfill('#') << '#' << std::endl;
					std::cout << std::setw(210) << std::setfill('#') << '#' << std::endl << std::endl;

					std::cout << std::setw(78) << std::setfill(' ') << ' ' << (char)176;
					printf("\x1B[31mWelcome to the game \"Minesweeper\"\033[0m");
					std::cout << (char)176 << std::endl;
					std::cout << std::setw(60) << std::setfill(' ') << ' ' << " Your goal is to open empty cells without opening any containing mines." << std::endl << std::endl;


					std::cout << std::setw(82) << std::setfill(' ') << ' ';
					printf("\x1B[31mRules of the game :\033[0m");
					std::cout << std::endl << std::endl;
					std::cout << std::setw(55) << std::setfill(' ') << ' ' << " Select a specific coordinate on the field. When you select a cell, it opens. " << std::endl;
					std::cout << std::setw(68) << std::setfill(' ') << ' ' << " If there is a mine in it, the player loses. " << std::endl << std::endl;
					std::cout << std::setw(20) << std::setfill(' ') << ' ' << " If there is no mine in the cell itself, but there are mines in neighboring cells, then the number corresponding to the number of mines in neighboring cells is displayed." << std::endl;
					std::cout << std::setw(47) << std::setfill(' ') << ' ' << " Several adjacent numbered slots represent the same mines, allowing you to pinpoint dangerous slots. " << std::endl;
					std::cout << std::setw(33) << std::setfill(' ') << ' ' << " If there are no mines in either the cell itself or the cells adjacent to it, then all adjacent empty cells are opened. " << std::endl << std::endl;

					std::cout << std::setw(59) << std::setfill(' ') << ' ' << " For convenience, the slots of the shafts can be marked with flags." << std::endl;
					std::cout << std::setw(56) << std::setfill(' ') << ' ' << " The game is won as soon as all cells that do not contain mines are open." << std::endl << std::endl;

					std::cout << std::setw(80) << std::setfill(' ') << ' ';
					printf("\x1B[34mGood luck with your game!\033[0m");
					std::cout << std::endl << std::endl;

					std::cout << std::setw(210) << std::setfill('#') << '#' << std::endl;
					std::cout << std::setw(210) << std::setfill('#') << '#' << std::endl;
					std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

					Sleep(3000);
					EpilepsyTime("Launching the game.");
					break;
				}
		}
		

		bool** HiddenField = new bool* [size]; // Поле, где отображаются мины
		char** GameField = new char* [size];  // Игровые поля для геймера
		char** MinaBoard = new char* [size]; // Поле, где ставятся мины и числа

		Create_GameField(size, GameField, MinaBoard, HiddenField); // Создаем игровое поле

		bool _continue = 1; // Чтобы продолжить игровой цикл
		short horizontal_coordinat; // Горизонтальные координаты, например (1, 2, 3, 4...)
		char  vertical_coordinat;  // Вертикальные координаты, например буквы ('A', 'B'...)
		bool isCreated = 0; // Ставит мины после выдачи координат пользователя (помогает не проиграть с первого раза)

		// Игра
		{
			do
			{
				Sleep(250);

				system("color F0");
				Display_GameField(size, GameField); // Отображение игрового поля
				//Display_GameField(size, MinaBoard);

				if (!IsWinner(size, GameField, MinaBoard))
				{
					if (!language) {
						std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

						std::cout << std::setw(98) << std::setfill(' ') << " Выберете :" << std::endl;
						std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

						std::cout << std::setw(85) << std::setfill(' ') << ' ' << " 0. Выбрать ячейку" << std::endl; // Select_cell
						std::cout << std::setw(85) << std::setfill(' ') << ' ' << " 1. Поставить флаг" << std::endl; // Put_flag
						std::cout << std::setw(85) << std::setfill(' ') << ' ' << " 2. Снять флаг "<< std::endl; // Remove_flag

					}
					else
					{

						std::cout << std::setw(98) << std::setfill(' ') << " Select :" << std::endl;
						std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

						std::cout << std::setw(85) << std::setfill(' ') << ' ' << " 0. Select cell" << std::endl; // Select_cell
						std::cout << std::setw(85) << std::setfill(' ') << ' ' << " 1. Put a flag" << std::endl; // Put_flag
						std::cout << std::setw(85) << std::setfill(' ') << ' ' << " 2. Remove a flag" << std::endl; // Remove_flag
					}

					std::cout << std::setw(94) << std::setfill(' ') << " => "; std::cin >> op;

					if (op < 0 || op > 2)
					{
						op = 0;
					}

					flag = true;
					do
					{
						std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;
						std::cout << std::setw(80) << std::setfill(' ') << ' ';
						if (!language) printf("\x1B[31mПожалуйста стреляйте\033[0");
						else  printf("\x1B[31mPlease shoot!\033[0");


						std::cout << std::endl;
						std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

						std::cout << std::setw(67) << std::setfill(' ') << ' ';
						if (!language) printf("\x1B[31mВведите горизонтальные + вертикальные координаты (например, A1) =>\033[0");
						else  printf("\x1B[31mEnter horizontal + vertical coordinates (e.g. A1) =>\033[0");

						std::cin >> vertical_coordinat >> horizontal_coordinat;
						// Проверка координатов
						if (!Check_coordinats(size, vertical_coordinat, horizontal_coordinat))
						{
							flag = false;
							std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;
							std::cout << std::setw(115) << std::setfill(' ');
							if (!language) std::cout << "Вы ввели что-то не так, попробуйте еще раз!" << std::endl;
							else std::cout << "You entered something wrong, please try again!" << std::endl;
							Wrong(); system("color F0");

							std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;
						}

					} while (!flag);

					if (!isCreated)
					{
						SetMina(mines, size, MinaBoard, HiddenField, vertical_coordinat - 65, horizontal_coordinat);
						isCreated = true;
					}

					switch (op)
					{
					case Select_cell:
					{
						if (GameField[vertical_coordinat - 65][horizontal_coordinat] == (char)2)
						{
							_continue = Impact(vertical_coordinat - 65, horizontal_coordinat, size, GameField, MinaBoard);
						}
						else
						{
							if (!language) std::cout << "Повтор ячейки, выберите другой !" << std::endl;
							else std::cout << "Cell repeat, choose another!" << std::endl;
							Wrong();
						}
						
						break;
					}

					case Put_flag:
					{
						if (GameField[vertical_coordinat - 65][horizontal_coordinat] == (char)2)
						{
							GameField[vertical_coordinat - 65][horizontal_coordinat] = (char)33;
						}

						else
						{
							if (!language) std::cout << "Повтор ячейки, выберите другой !" << std::endl;
							else std::cout << "Cell repeat, choose another!" << std::endl;
							Wrong();
						}
						break;
					}
					case Remove_flag:
					{
						if (GameField[vertical_coordinat - 65][horizontal_coordinat] == (char)33)
						{
							GameField[vertical_coordinat - 65][horizontal_coordinat] = (char)2;
						}
						else
						{
							if (!language) std::cout << "В ячейке уже нет флажка, выбирайте другой!" << std::endl;
							else std::cout << "The checkbox is no longer in the cell, choose another!" << std::endl;
							Wrong();
							system("color F0");
						}
						break;
					}
					}
					system("cls");
				}
				else
				{
					Display_GameField(size, MinaBoard);
					std::cout << std::setw(95) << std::setfill(' ');
					if (!language) std::cout << "Вы выиграли!" << std::endl;
					else std::cout << "You win!" << std::endl;
					_continue = false;
				}

			} while (_continue);

			if (!IsWinner(size, GameField, MinaBoard))
			{
				Display_GameField(size, MinaBoard);
				std::cout << std::setw(95) << std::setfill(' ');
				if (!language) std::cout << "Вы проиграли!" << std::endl;
				else std::cout << "You lose!" << std::endl;
				Wrong();
				system("color F0");
			}
		}
		Sleep(5500);
		system("color 0F");
		// Запрос на повторение игры
		{
			system("cls");
			if (!language)
			{
				std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;
				std::cout << std::setw(110) << std::setfill(' ') << "Вы хотите начать новую игру?" << std::endl;
				std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

				std::cout << std::setw(90) << std::setfill(' ') << ' ' << " 0. Нет" << std::endl; // No
				std::cout << std::setw(90) << std::setfill(' ') << ' ' << " 1. Да" << std::endl; // Yes

				std::cout << std::setw(95) << std::setfill(' ') << " => "; std::cin >> Game;
				std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

				if (Game != 0 && Game != 1)
				{
					std::cout << std::setw(102) << std::setfill(' ') << " По умолчанию Нет!" << std::endl;
					std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

					Game = 0;
				}

				if (!Game)
				{
					std::cout << std::setw(100) << std::setfill(' ') << " До свидания!" << std::endl;
					std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;
				}
				else
				{
					system("cls");
					std::cout << std::setw(210) << std::setfill('#') << '#' << std::endl;
					std::cout << std::setw(210) << std::setfill('#') << '#' << std::endl << std::endl;
					EpilepsyTime("Игра «Сапер» загружается.");
				}
			}
			else
			{
				std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;
				std::cout << std::setw(110) << std::setfill(' ') << " Do you want to start a new game?" << std::endl;
				std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

				std::cout << std::setw(90) << std::setfill(' ') << ' ' << " 0. No" << std::endl; // No
				std::cout << std::setw(90) << std::setfill(' ') << ' ' << " 1. Yes" << std::endl; // Yes

				std::cout << std::setw(95) << std::setfill(' ') << " => "; std::cin >> Game;
				std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

				if (Game != 0 && Game != 1)
				{
					std::cout << std::setw(99) << std::setfill(' ') << " Default No!" << std::endl;
					std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;

					Game = 0;
				}

				if (!Game)
				{
					std::cout << std::setw(98) << std::setfill(' ') << " Goodbye!" << std::endl;
					std::cout << std::setw(212) << std::setfill('_') << " \n" << std::endl;
				}
				else
				{
					system("cls");
					std::cout << std::setw(210) << std::setfill('#') << '#' << std::endl;
					std::cout << std::setw(210) << std::setfill('#') << '#' << std::endl << std::endl;
					EpilepsyTime("Minesweeper game is Loading.");
				}
			}
		}

		Deleting_GameOptions(size, GameField, MinaBoard, HiddenField); // Удаление параметров игры

	} while (Game);
}
